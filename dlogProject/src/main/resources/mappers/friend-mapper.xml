<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="friendMapper">
	
	<resultMap type="Friend" id="friendResultSet">
		<id column="friend_no" property="friendNo" />
		<result column="friend_owner" property="friendOwner" />
		<result column="friend_nickname" property="friendNickname" />
		<result column="friend_accepted" property="friendAccepted" />
		<result column="friend_status" property="friendStatus" />
		<result column="friend_profile" property="friendProfile" />
	</resultMap>
	
	<resultMap id="memberResultSet" type="Member">
		<id column="member_no" property="memberNo" />
		<result column="member_name" property="memberName" />
		<result column="member_id" property="memberId" />
		<result column="member_pwd" property="memberPwd" />
		<result column="email" property="email" />
		<result column="phone" property="phone" />
		<result column="nickname" property="nickname" />	
		<result column="profile" property="profile" />
		<result column="enroll_date" property="enrollDate" />
		<result column="modify_date" property="modifyDate" />
		<result column="status" property="status" />
		<result column="introduction_title" property="introductionTitle" />
		<result column="introduction_content" property="introductionContent" />	
	</resultMap>
	
	<select id="selectFriendList"
			parameterType="_int"
			resultMap="friendResultSet">
		select friend_no, friend_owner, 
                                case when friend_owner = #{friendOwner} then m.nickname 
                                    else (select nickname
                                           from member
                                          where member_no = to_char(f.friend_owner)) end friend_nickname, 
                                                                    friend_accepted, friend_status, 
                                                                                                    case when friend_owner = #{friendOwner} then m.nickname 
                                                                                                        else (select profile
                                                                                                               from member
                                                                                                              where member_no = to_char(f.friend_owner)) end friend_profile
		  from friend f
		  join member m on(f.friend_accepted=m.member_no)
		 where (friend_owner = #{friendOwner} or friend_accepted = #{friendOwner})
		   and friend_status = 'Y'
		 order 
		    by friend_no
	</select>
	
	<select id="selectFriendListCount"
			parameterType="_int"
			resultType="_int">
		select count(*)
		  from (
				select friend_no, friend_owner, 
                                case when friend_owner = #{friendOwner} then m.nickname 
                                    else (select nickname
                                           from member
                                          where member_no = to_char(f.friend_owner)) end friend_nickname, 
                                                                    friend_accepted, friend_status, 
                                                                                                    case when friend_owner = #{friendOwner} then m.nickname 
                                                                                                        else (select profile
                                                                                                               from member
                                                                                                              where member_no = to_char(f.friend_owner)) end friend_profile
				  from friend f
				  join member m on(f.friend_accepted=m.member_no)
				 where (friend_owner = #{friendOwner} or friend_accepted = #{friendOwner})
				   and friend_status = 'Y'
				 order 
				    by friend_no)
	</select>
	
	<delete id="deleteFriend"
			parameterType="Friend">
		delete 
	      from friend
	     where friend_no = #{friendNo}
	</delete>
	
	<select id="searchFriend"
			parameterType="Member"
			resultMap="friendResultSet">
		select *
		from (select friend_no, friend_owner, 
                                case when friend_owner = #{memberNo} then m.nickname 
                                    else (select nickname
                                           from member
                                          where member_no = to_char(f.friend_owner)) end friend_nickname, 
                                                                    friend_accepted, friend_status,
                                                                    								case when friend_owner = #{memberNo} then m.nickname 
                                                                                                        else (select profile
                                                                                                               from member
                                                                                                              where member_no = to_char(f.friend_owner)) end friend_profile
		  from friend f
		  join member m on(f.friend_accepted=m.member_no)
		 where (friend_owner = #{memberNo} or friend_accepted = #{memberNo})
		   and friend_status = 'Y'
		 order 
		    by friend_no)
	 where friend_nickname like '%'|| #{nickname} ||'%'
	</select>
	
	<select id="findFriend"
			parameterType="Member"
			resultMap="memberResultSet">
		select *
		  from member m
		 where member_no not in (select case when friend_owner = #{memberNo} then friend_accepted
		                                    else friend_owner end friendNo
		                          from friend
		                         where (friend_owner = #{memberNo} or friend_accepted = #{memberNo}))
		   and member_no not in (1, #{memberNo})
		   and nickname like '%' || #{nickname} || '%'
		 order
		    by member_no
	</select>
	
	<select id="requestFriend"
			parameterType="_int"
			resultMap="friendResultSet">
		select friend_no, friend_owner, m.nickname friend_nickname, friend_accepted, friend_status, m.profile friend_profile
		  from friend f
		  join member m on (member_no = friend_owner)
		 where friend_accepted = #{friendAccepted}
		   and f.friend_status = 'N'
	</select>
	
	<update id="acceptFriend"
			parameterType="Friend">
		update friend
		   set friend_status = 'Y'
		 where friend_no = #{friendNo}
	</update>
	
	<delete id="rejectFriend"
			parameterType="Friend">
		delete 
		  from friend
		 where friend_no = #{friendNo}
	</delete>
	
	<insert id="insertFriend"
			parameterType="Friend">
		insert 
		  into friend
		values
		     (
		       seq_friendno.nextval
		     , #{friendOwner}
		     , #{friendAccepted}
		     , 'N'
		     )
	</insert>
	
	<select id="visitFriend"
			parameterType="_int"
			resultMap="memberResultSet">
		select *
		  from member 
		 where member_no = #{memberNo}
	</select>
	
</mapper>
